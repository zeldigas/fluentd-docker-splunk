<%
@extract_labels=[]

if ENV.key?('DOCKER_EXPORT_LABELS')
@extract_labels=ENV['DOCKER_EXPORT_LABELS'].split(',')
end

@default_exclude=ENV.fetch('SPLUNK_DEFAULT_EXCLUDE', 'false')

prefix='SPLUNK_EXTRA_META_'
@extra_meta=ENV.select {|k,v| k.start_with? 'SPLUNK_EXTRA_META_'}.map {|k,v| [k[prefix.length..-1], v]}.to_h
%>
<label @SPLUNK>

    # Enrich log with docker metadata
    <filter tail.containers.**>
    @type docker_metadata_elastic
    </filter>

    <filter tail.containers.**>
        @type record_transformer
        enable_ruby
        <record>
          # set the sourcetype from splunk.com/sourcetype pod annotation or set it to kube:container:CONTAINER_NAME
          sourcetype ${record.dig("docker", "labels", "splunk_com/sourcetype") ? "docker:"+record.dig("docker", "labels", "splunk_com/sourcetype") : "docker:container:"+record.dig("docker","name")}
          container_name ${record.dig("docker","name")}
          container_id ${record.dig("docker","id")}
          container_image ${record.dig("docker","image")}
          service_name ${record.dig("docker","labels", "io_rancher_stack_service_name")}
          stack_name ${record.dig("docker","labels", "io_rancher_stack_name")}          

          # set the index field to the value found in the pod splunk_com/index annotations. if not set, use namespace annotation, or default to the default_index
          index ${record.dig("docker", "labels", "splunk_com/index") ? record.dig("docker", "labels", "splunk_com/index") : ENV['SPLUNK_INDEX']}
          
          exclude_list ${record.dig("docker", "labels", "splunk_com/exclude") ? record.dig("docker", "labels", "splunk_com/exclude") : "<%= @default_exclude %>"}

          host_instance_id "#{ENV['HOST_INSTANCE_ID'] || use_nil}"
          host_az "#{ENV['HOST_AZ'] || use_nil}"

          <% @extract_labels.each do | label| %>
          label_<%= label %> ${record.dig("docker","labels", "<%= label.gsub('.', '_') %>")}    
          <% end %>

          <% @extra_meta.each do | label, value| %>
          <%= label %> "<%= value %>"
          <% end %>                  
        </record>
      </filter>
      <filter tail.containers.**>
        # Exclude all logs that are marked
        @type grep
        <exclude>
          key exclude_list
          pattern /^true$/
        </exclude>
      </filter>

    <match **>
        @type splunk_hec
        protocol "#{ENV['SPLUNK_HEC_PROTOCOL'] || 'https'}"
        hec_host "#{ENV['SPLUNK_HEC_HOST']}"
        hec_port "#{ENV['SPLUNK_HEC_PORT'] || '443'}"
        hec_token "#{ENV['SPLUNK_HEC_TOKEN']}"
        index_key index
        insecure_ssl "#{ENV['SPLUNK_HEC_INSECURE_SSL'] || false}"

        host "#{ENV['HOST_HOSTNAME']}"
        source_key source
        sourcetype_key sourcetype
        <fields>
          container_id
          container_image
          container_name

          service_name
          stack_name
          host_instance_id
          host_az

          <% @extract_labels.each do | label| %>
          label_<%= label %>
          <% end %>
          <% @extra_meta.each do | label, value| %>
          <%= label %>
          <% end %>         
        </fields>
        
        <buffer>
          "@type" memory
          total_limit_size 600m
          chunk_limit_size 20m
          chunk_limit_records 100000
          flush_interval 5s
          flush_thread_count 1
          overflow_action block
          retry_max_times 5
          retry_type periodic
        </buffer>
        
        <format>
          # we just want to keep the raw logs, not the structure created by docker or journald
          @type single_value
          message_key log
          add_newline false
        </format>
    </match>

</label>